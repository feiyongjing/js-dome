.test {
    width: 400px;
    height: 400px;
    background-color: bisque;
    border: 2px magenta solid;
    /* flex值表示块级弹性盒子，弹性盒子中的子元素（不包含子元素的后代元素）全部都会变成具备块元素的特性（可以设置宽高等属性）
       inline-flex值表示行内块级弹性盒子（几乎不使用，盒子之间还有间隙，如果需要同样的效果可以调整父元素为flex控制） 
    */
    display: flex;

    /* flex-direction设置弹性盒子的主轴方向，默认是row
       row设置主轴方向是从左向右，即子元素按照主轴方向摆放，默认左对齐
       row-reverse设置主轴方向是从右向左，即子元素按照主轴方向摆放，默认右对齐
       column设置主轴方向是从上向下，即子元素按照主轴方向摆放，默认上对齐
       column-reverse设置主轴方向是从下向上，即子元素按照主轴方向摆放，默认下对齐
    */
    /* flex-direction: row; */

    /* flex-wrap设置弹性盒子的主轴换行方式，默认是nowrap
       nowrap设置主轴方向的子元素不换行，如果实在放不下就会强行放下，并且这一行的子元素宽度都等比例缩小
       wrap设置主轴方向的子元素换行，但是纵向的宽度足够放下子元素并且有剩余，则会与上一行有一定的间隙，设置垂直对齐方式可以解决间隙问题
       wrap-reverse设置主轴方向的子元素换行，但是反向向上换行，并且第一行在父元素的最下方
    */
    /* flex-wrap: nowrap; */

    /* flex-flow是弹性盒子主轴的复合属性，可以同时设置主轴方向和主轴换行方式 */
    flex-flow: row wrap;

    /* justify-content设置弹性盒子中弹性子元素水平对齐方式
      flex-start按照主轴的起始方向对齐
      flex-end按照主轴的结束方向对齐
      center水平居中摆放
      space-around设置每行子元素水平均匀的分布，子元素与父元素的左右边缘不会接触，且子元素与子元素的水平距离是第一个或最后一个子元素与父元素左右边缘距离的两倍
      space-between设置每行子元素水平均匀的分布，第一个或最后一个子元素与父元素的左右边缘会接触
      space-evenly设置每行子元素水平均匀的分布，第一个或最后一个子元素与父元素的左右边缘不会接触
    */
    justify-content: center;

    /* align-items设置弹性盒子中弹性子元素只有一行时的垂直对齐方式，默认值是stretch
       flex-start按照主轴的起始方向对齐
       flex-end按照主轴的结束方向对齐
       center垂直居中摆放
       stretch表示按照主轴的起始方向对齐，并且当不设置子元素高度时所有行的子元素会均匀的填充整个父元素高度
    */
    /* align-items: flex-end; */

    /* align-content设置弹性盒子中弹性子元素多行时的垂直对齐方式，默认值是stretch
       flex-start按照主轴的起始方向对齐
       flex-end按照主轴的结束方向对齐
       center垂直居中摆放
       space-around设置每行子元素垂直均匀的分布，子元素与父元素的上下边缘不会接触，且子元素与子元素的垂直距离是第一行或最后一行子元素与父元素上下边缘距离的两倍
       space-between设置每行子元素垂直均匀的分布，第一行或最后一行子元素与父元素的上下边缘会接触
       space-evenly设置每行子元素垂直均匀的分布，第一行或最后一行子元素与父元素的上下边缘不会接触
       stretch表示按照主轴的起始方向对齐，并且当不设置子元素高度时所有行的子元素会均匀的填充整个父元素高度
    */
    align-content: center;
}

.test1 {
    width: 100px;
    height: 100px;
    box-sizing: border-box;
    background-color: yellowgreen;

    /*设置弹性盒子中弹性子元素占据主轴方向总空间的权重，就是等比例的划分所有弹性子元素的宽或高，而原来设置的宽或高失效。
      弹性盒子主轴方向是横向（从左到右或者从右到左）时等比例的划分所有弹性子元素的宽
      弹性盒子主轴方向是横向（从上到下或者从下到上）时等比例的划分所有弹性子元素的高
    */
    flex: 2; 
}

.test2 {
    width: 100px;
    height: 100px;
    box-sizing: border-box;
    background-color: sandybrown;
    /* flex: 2;  */
}

.test3 {
    width: 100px;
    height: 100px;
    box-sizing: border-box;
    background-color: turquoise;
    /* flex: 2;  */
}


.test4 {
    width: 100px;
    height: 100px;
    box-sizing: border-box;
    background-color: yellowgreen;

    /* flex-grow设置弹性盒子中弹性子元素占据主轴方向空余空间的权重，就是等比例的划分所有弹性子元素占据空余空间的宽或高，而原来设置的宽或高会失效
       弹性盒子主轴方向是横向（从左到右或者从右到左）时所有弹性子元素增加占据主轴方向空余空间按等比例的划分的宽
       弹性盒子主轴方向是横向（从上到下或者从下到上）时所有弹性子元素增加占据主轴方向空余空间按等比例的划分的高
       默认值是0，不增加宽高
    */
    flex-grow: 1; 
}

.test5 {
    width: 100px;
    height: 100px;
    box-sizing: border-box;
    background-color: sandybrown;
    flex-grow: 1; 
}

.test6 {
    width: 100px;
    height: 100px;
    box-sizing: border-box;
    background-color: turquoise;
    flex-grow: 1; 
}